# 1. Создать класс TrafficLight (светофор) и определить у него один атрибут color (цвет) и метод running (запуск).
# Атрибут реализовать как приватный. В рамках метода реализовать переключение светофора в режимы: красный,
# желтый, зеленый. Продолжительность первого состояния (красный) составляет 7 секунд, второго (желтый) — 2 секунды,
# третьего (зеленый) — на ваше усмотрение. Переключение между режимами должно осуществляться только в указанном порядке
# (красный, желтый, зеленый). Проверить работу примера, создав экземпляр и вызвав описанный метод.
# Задачу можно усложнить, реализовав проверку порядка режимов, и при его нарушении выводить соответствующее сообщение и
# завершать скрипт.

""" Не совсем понял как реализовать все требования к методу running в одном методе (не понял какая может быть
необходимость контролировать порядок цветов при автоматическом режиме работы и какая может быть возможность задавать
продолжительность состояний при ручном режиме работы).

Поэтому написал 3 метода, каждый из которых частично выполняет задачу """

from itertools import cycle
from time import sleep


class TrafficLight:
    def __init__(self, color=None):
        self.__color = color
        self.__colors_order = cycle((('red', 7), ('yellow', 2), ('green', 5)))

    def running(self):
        """ Запускает режим разового переключение светофора в следующее состояние """

        while True:
            print('Светофор готов к переключению!', end='')

            key = input('Нажмите Enter для переключения (для выхода введите "q"): ')
            if key == 'q':
                exit()

            regime = next(self.__colors_order)
            self.__color = regime[0]
            print(f'Текущий цвет светофора: {self.__colored_text()} Ожидание возможности для переключения...')
            sleep(regime[1])

    def auto_running(self, silent=False):
        """ Запускает автоматическое управление светофором """

        i = 0
        for regime in self.__colors_order:
            if i < 10:
                self.__color = regime[0]
                if not silent:
                    print(self.__colored_text(), 'Ожидание возможности для переключения...')
                sleep(regime[1])
                i += 1
            else:
                break

    def manual_running(self):
        """ Запускает ручное управление светофором """

        print('Внимание! Вы в режиме ручного переключения цвета, следите за последовательностью цветов.')
        for regime in self.__colors_order:
            manual_regime = input('Введите название цвета (red/yellow/green) или "q" для завершения работы: ')
            if manual_regime == 'q':
                exit()
            if manual_regime != regime[0]:
                print('Нарушен порядок цветов!')
                exit()
            self.__color = regime[0]
            print(f'\033[1mТекущий цвет светофора: {self.__colored_text()} Ожидание возможности для переключения...')
            sleep(regime[1])

    def __colored_text(self):
        if self.__color == 'red':
            code = '[31m'
        elif self.__color == 'green':
            code = '[32m'
        else:
            code = '[33m'
        return f'\033{code}█\033[0m'


t = TrafficLight()
print('В каком режиме запустить светофор?', end='')
run = input('\n1 - разовое переключение\n2 - автоматический режим\n3 - ручной режим\n')
if run == '1':
    t.running()
elif run == '2':
    t.auto_running()
elif run == '3':
    t.manual_running()
else:
    print('Ошибка ввода.')
